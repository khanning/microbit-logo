;----------------
; compiler top level
;

to cdl
let [res compile-file "test.txt]
dumpl :res
wl :ram :res erp :proc-addr
flash-write :ram :proc-addr count :res
wl :ram :shapes erp :font-addr
flash-write :ram :font-addr count :shapes
end

to \ :line
clearcom
let [bytes se compile-line :line 0
     addrs getaddrs
     sp (nth 0 :addrs) + 7 * 512
     vm nth 1 :addrs]
wl :sp + $1c0 :bytes
wl :sp (se bytes :sp + 20 bytes :vm bytes :sp + $1c0 bytes 0 bytes 0) 
end

to compile-file :file
let [bytes compile-fcns parse filetostring :file
     vectors makelist :startaddr
     next-vector 0]
dotimes[i count :vectors][setnth :i :vectors 0]
setup-vectors "on-start 8
setup-vectors "on-buttona $80
setup-vectors "on-buttonb $81
setup-vectors "on-recv $82
;setup-vectors "on-light $83
output se :vectors :bytes
end


to compile-fcns :code
dolist [i :plist-names] [erplist :i]
setup
output pass3 pass2 pass1 :code
end

to compile-line :code
let [*result* [] arglist [] 
      *pc* 0]
pass2-body :code
output pass3 :*result*
end

to setup-vectors :type :op
setup-vector :type :op
dotimes [i 7][setup-vector .word :type :i + 1 :op]
end

to setup-vector :name :op 
let [addr get :name "addr]
if empty? :addr [stop]
setnth :next-vector :vectors :op
setnth :next-vector + 1 :vectors byte0 :addr
setnth :next-vector + 2 :vectors byte1 :addr
make "next-vector :next-vector + 4
end

;----------------
; compiler pass1
;

to pass1 :list
let [*result* [] token "]
loop 
 [if empty? :list [output :*result*]
  make "token pop "list
  if :token = "to  [pass1-fcn pop "list pass1-args pass1-body]
  if :token = "shapes [pass1-shapes pop "list]]
end

to pass1-fcn :proc :args :body
add-name :proc
add (list :proc :args :body)
put :proc "args count :args
put :proc "type "ufun
ifelse mmmember? "output :body
    [put :proc "outputs? true]
    [put :proc "outputs? false]
end

to pass1-args
let [*result* []]
loop 
 [if empty? first :list [output :*result*]
  if not equal? ": first first :list [output :*result*]
  add bf pop "list]
end

to pass1-body
let [*result* []]
loop 
 [if empty? :list [output :*result*]
  if equal? "end first :list [ignore pop "list output :*result*]
  add pop "list]
end

to pass1-shapes :l
make "shapes []
dolist [i :l][make "shapes se :shapes shapenum :i]
make "shapes se :shapes $ff
end

to shapenum :x
let [res 0]
repeat count :x
 [make "res :res * 2 
  if (first :x) = "x [make "res :res + 1]
  make "x bf :x]
output :res
end

to mmmember? :a :b
if word? :b [output equal? :a :b]
dolist [i :b][if mmmember? :a :i [output true]]
output false
end

;----------------
; compiler pass2
;


to pass2 :list
let [*result* [] *pc* :startaddr]
loop [if empty? :list [output :*result*]
         pass2-fcn pop "list]
end

to pass2-fcn :fcn
let [name item 1 :fcn
        arglist item 2 :fcn
        locals []
        body item 3 :fcn
        toplevel? true]
put :name "addr :*pc*
add-and-count se "to :name 1
pass2-body :body
add-and-count [prim stop] 1
end

to pass2-body :body
loop [if empty? :body [stop]
      pass2-item pop "body]
end

to pass2-item :item
selectq typeof :item
    [list [pass2-list :item stop]
      number [pass2-number :item stop]
      string [pass2-string :item stop]
      dot-symbol[pass2-dsym bf :item stop]]
if startswith :item "set: [pass2-set: :item stop]
if startswith :item "change: [pass2-change: :item stop]
pass2-symbol :item
end

to pass2-number :n
ifelse (and :n < 256 :n > -1 :n = round :n)
   [add-and-count se "byte :n 2]
   [add-and-count se "number round :n * 100 5]
end

to pass2-symbol :item
let [nargs getp :item "args]
if empty? :nargs [print se :item [not defined] stop]
pass2-argloop :nargs
pass2-funcall :item
end

to pass2-string :str
make "str replace :str "\\n char 10
add-and-count se "string :str (count :str) + 4
end

to pass2-argloop :n
repeat :n [pass2-item pop "body]
end

to pass2-list :item
add-and-count [|-[-| 0] 3
pass2-body :item
add-and-count [|-]-| 0] 1
end

to pass2-dsym :item
let [offset dsym-offset :item]
add-and-count se "lthing  :offset 2
end

to pass2-set: :item
let [offset dsym-offset intern bf bf bf bf :item]
pass2-argloop 1
add-and-count se "lset :offset 2
end

to pass2-change: :item
let [offset dsym-offset intern bf bf bf bf bf bf bf :item]
pass2-argloop 1
add-and-count se "lchange :offset 2
end


to pass2-funcall :item
if equal? getp :item "type "ufun [add-and-count se "ufun :item 3 stop]
add-and-count se "prim :item 1
end

to dsym-offset :var
if member? :var :arglist [output (count :arglist) - itempos :var :arglist]
output "
end

to sym :name
if member? first :name [" :][output bf :name]
output :name
end

;----------------
; compiler pass3
;

to pass3 :list
let [lists []
      *result* []]
repeat 99999
 [if empty? :list [output :*result*]
  pass3-item pop "list]
end

to pass3-item :item
let [x item 3 :item]
selectq item 2 :item
   [to           [add getp :x "args]
    byte        [add 1 add byte0 :x]
    number      [add 2 add byte0 :x add byte1 :x
                 add byte2 :x add byte3 :x]
    |-[-|       [add 3
                 make "lists  fput count :*result* :lists 
                 add 0 add 0]
    string      [add 3 add byte0 1 + count :x
                 add byte1 1 + count :x
                 dotimes [i count :x][add ascii item :i + 1 :x]
                 add 0]
    |-]-|       [add-eol 4]
    lthing      [add 5 add :x]
    lset        [add 6 add :x]
    lchange     [add 7 add :x]
    ufun        [add 8
                 add byte0 (getp :x "addr)
                 add byte1 (getp :x "addr)]
    prim        [add prim# :x]]
end

to add-eol :n
add :n
let [offset pop "lists
     len (count :*result*) - :offset - 2]
setnth :offset :*result* byte0 :len
setnth :offset + 1 :*result* byte1 :len
end

to prim# :x
output  (itempos :x :prims) + 8
end

;----------------
; utilities
;

to dumpl :l
let [addr 0 line []]
loop
 [if empty? :l [print (se hhw :addr "- :line) stop]
  make "line se :line hb first :l
  if (count :line) = 16 
   [print (se hhw :addr "- :line) 
    make "addr :addr + 16
    make "line []]
  make "l bf :l]
end

to pop :plist
let [first first thing :plist]
make :plist bf thing :plist
output :first
end

to add-and-count :item :len
add se :*pc* :item
make "*pc* sum :*pc* :len
end

to add :item
make "*result* lput :item :*result*
end

to add-name :item
make "plist-names lput :item :plist-names
end

to typeof :item
if list? :item [output "list]
if number? :item [output "number]
if (first :item) = ": [output "dot-symbol]
if (classof :item) = classof first [|abc|] [output "string]
output "symbol
end

to setup-prims :list
let [name " args 0]
loop 
 [if empty? :list [stop]
  make "name first :list 
  make "args item 3 :list
  make "prims se :prims :name
  put :name "type "prim
  put :name "args :args
  put :name "outputs? equal? "r item 2 :list
  make "list bf bf bf :list]  
end

to setup
if name? "prims [dolist [i :prims][erplist :i]]
make "plist-names []
make "prims []
setup-prims 
 [stop c 0  output c 1  stopall c 0  
  repeat c 2  forever c 1  if c 2  ifelse c 3
  waituntil c 1
  add r 2  subtract r 2  multiply r 2  divide r 2
  mod r 2
  eq r 2  ne r 2  gt r 2  lt r 2
  and r 2  or r 2  xor r 2  not r 1
  setbox c 2  box r 1  changebox c 2
  random r 2  print c 1  prf c 2  wait c 1  
  resett c 0  timer r 0  ticks c 0
  shape c 1  clear c 0  nextshape c 0
  doton c 2  dotoff c 2
  accx r 0  accy r 0  accz r 0  acc r 0
  buttona r 0  buttonb r 0
  send c 1  recv r 0]
end

to compiler-startup
make "startaddr 32
make "proc-addr $30000
make "font-addr $31000
make "ram $20003700
setup
end
