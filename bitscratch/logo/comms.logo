;---------------
; monitor
;
to ticktask
let [c 0 res "]
loop
 [make "c .recc
  if :c = -1 [stop]
  if :c = $cf [stop]
  if :c = 13 [stop]
  ifelse :c = 10
    [print :monstr make "monstr "]
    [make "monstr word :monstr char :c]]
end



;---------------
;
; comms
;

to dump :addr :len
let [res []]
if :len = 0 [make "len 1]
make "len 16 * int (:len + 15) / 16
let [l rl :addr :len]
repeat :len / 16
 [make "res se hw :addr "-
  repeat 16 [make "res se :res hb first :l make "l bf :l]
  print :res
  make "addr :addr + 16]
end

to rl :addr :count
let [res []]
clearcom
sendl (se $fe 
          byte0 :addr byte1 :addr
          byte2 :addr byte3 :addr
          byte0 :count byte1 :count)
dotimes [i :count][make "res se :res recc]
output :res
end

to getaddrs
clearcom
send $f7
output se recc32 recc32
end

to wl :addr :l
let [count count :l]
clearcom
sendl (se $fd
         byte0 :addr byte1 :addr
         byte2 :addr byte3 :addr
         byte0 :count byte1 :count
         :l)
repeat count :l [ignore recc]
end

to wfl :addr :l
loop
 [if empty? :l [stop]
  repeat 32 - count :l [make "l se :l $ff]
  wl :command-center first32 :l
  flash-write :command-center :addr 32
  make "l bf32 :l
  make "addr :addr + 32]
end

to flash-write :src :dst :count
clearcom
sendl (se $fb
         byte0 :src byte1 :src
         byte2 :src byte3 :src
         byte0 :dst byte1 :dst
         byte2 :dst byte3 :dst
         byte0 :count byte1 :count)
if (trecc 1000) = -1 [print se [flash write error] hw :dst stopme]
end

to erp :addr
clearcom
sendl (se $fa
          byte0 :addr byte1 :addr
          byte2 :addr byte3 :addr)
if (trecc 1000) = -1 [print [flash erase error]]
end

to setsh :l
sendl se $f9 :l
end

to stopvm
send 0 wait 2
end

to check
clearcom
send $ff
if recc = 23 [output true]
open-serial-port
wait 15
clearcom
send $ff
output recc = 23
end

to startvm
send $fc
end

to stopvm
send $f8
end

to first32 :l
if (count :l) < 32 [output :l]
let [res []]
dotimes [i 32][make "res se :res nth :i :l]
output :res
end

to bf32 :l
if (count :l) < 32 [output []]
repeat 32 [make "l bf :l]
output :l
end

to bytes-to-words :l
let [res []]
if (remainder (count :l) 2) = 1 [make "l se :l $ff]
loop
 [if empty? :l [output :res]
  make "res se :res (nth 0 :l) + 256 * nth 1 :l
  make "l bf bf :l]
end

define recc32[][output recc + (lsh recc 8) + (lsh recc 16) + (lsh recc 24)]

;---------------
;
; low level comms
;

to send :n
.send :n
end

to recc
output trecc 100
end

to trecc :n
let [c 0 starttime timer]
loop
 [make "c .recc
  if :c > -1 [output :c]
  if (timer - :starttime) > :n [output -1]]
end

to open-serial-port
make "monstr "
let [os getproperty "os.name]
if windows? [open-windows-port stop]
if member? "Linux :os [open-linux-port stop]
open-mac-port
end

to open-windows-port
let [name portname $2341 $0043]
if empty? :name [make "name portname $0403 $6015]
if empty? :name [make "name portname $0D28 $0204]
if empty? :name [stop]
openport :name
setportparams 19200 8 1 0
end

to open-mac-port
let [port find-mac-port]
if empty? :port [stop]
openport :port
ignore exec (word "|stty -f | :port "| 19200|)
end

to find-mac-port
dolist [i files "/dev][if member? "cu.usbmodem :i [output :i]]
dolist [i files "/dev][if member? "cu.usbserial :i [output :i]]
output "
end

to open-linux-port
let [port find-linux-port]
if empty? :port [stop]
openport :port
ignore exec (word "|stty -F | :port "| raw -echo 19200|)
end

to find-linux-port
dolist [i files "/dev][if member? "ttyACM0 :i [output :i]]
output "
end


